{% extends "base" %}
{% block body %}
    <div id="full-screen-div"></div>
    <style>
        body {
            display: flex;
            flex-direction: column;
        }

        #full-screen-div {
            position: fixed;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
            z-index: 10;
        }

        .button {
            z-index: 11;
        }
    </style>
    <section class="section has-text-centered paddingless">
        <p>{{ event }}</p>
    </section>
    <section class="section has-text-centered">
        <p><strong>{{ scramble }}</strong></p>
    </section>
    <section class="section is-flex is-flex-direction-column is-justify-content-center has-text-centered"
             style="flex-grow: 1">
        <p id="time" class="title">0.00</p>
        <div class="block"></div>
        <p id="tap-to-start" class="subtitle">Tap to start</p>
    </section>
    <section class="section">
        <div class="buttons is-flex is-justify-content-center">
            <a id="reset" class="button is-warning">
                Reset
            </a>
            <a id="keyboard" class="button is-light">
                <i class="ph ph-keyboard"></i>
            </a>
            <a id="submit" class="button is-success">
                Submit
            </a>
        </div>
        <div class="buttons is-flex is-justify-content-center">
            <div id="main-dropdown" class="dropdown">
                <div class="dropdown-trigger">
                    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                        <span id="dropdown-label"> No Penalty </span>
                        <span class="icon is-small">
                            <i class="ph ph-caret-down" aria-hidden="true"></i>
                        </span>
                    </button>
                </div>
                <div class="dropdown-menu" id="dropdown-menu" role="menu">
                    <div class="dropdown-content">
                        <a class="dropdown-item is-active"> No Penalty </a>
                        <a class="dropdown-item"> +2 </a>
                        <a class="dropdown-item"> DNF </a>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        const dropdownLabel = document.getElementById("dropdown-label");
        const dropdownItems = document.getElementsByClassName("dropdown-item");

        document.addEventListener('DOMContentLoaded', function () {
            const dropdowns = document.querySelectorAll('.dropdown');

            dropdowns.forEach(dropdown => {
                // Get the dropdown trigger element
                const trigger = dropdown.querySelector('.dropdown-trigger');

                // Add a click event listener to the trigger
                trigger.addEventListener('click', function () {
                    // Toggle the 'is-active' class on the dropdown
                    dropdown.classList.toggle('is-active');
                });
            });

            for (let item of dropdownItems) {
                item.addEventListener("click", () => {
                    dropdownLabel.textContent = item.textContent;
                    document.getElementById("main-dropdown").classList.toggle('is-active');
                })
            }

            let timerElement = document.getElementById('time');
            let resetButton = document.getElementById('reset');
            let keyboardButton = document.getElementById('keyboard');
            let submitButton = document.getElementById('submit');
            let tapToStartElement = document.getElementById('tap-to-start');

            let isRunning = false;
            let startTime, timerInterval;

            // Reset button functionality
            resetButton.addEventListener('click', function () {
                timerElement.innerText = "0.00";
                clearInterval(timerInterval);
                isRunning = false;
                tapToStartElement.style.visibility = 'visible'; // Show the directions again when reset
            });

            // Submit button functionality (POST request)
            submitButton.addEventListener('click', function () {
                let timeValue = parseFloat(timerElement.innerText);
                let penalty_text = dropdownLabel.textContent.toLowerCase();
                let penalty = 0;
                if (penalty_text.includes("+2")) {
                    penalty = 2;
                    timeValue += 2;
                } else if (penalty_text.includes("dnf")) {
                    penalty = 8;
                }
                if (parseFloat(timeValue) !== 0) {
                    fetch('/api/submit/{{ scramble_id }}/' + timeValue + '/' + penalty, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(() => {
                            location.reload()
                        }).catch(() => window.location.href = '/error');
                }
            });

            // Keyboard button functionality
            keyboardButton.addEventListener('click', function () {
                let userInput = prompt('Enter time (in seconds):');
                if (userInput && !isNaN(userInput)) {
                    timerElement.innerText = parseFloat(userInput).toFixed(2);
                    tapToStartElement.style.visibility = 'hidden';
                }
            });

            // Timer functionality for click interaction
            let timerSection = document.querySelector('#full-screen-div');

            // Function to start the timer
            function startTimer() {
                startTime = new Date().getTime();
                timerInterval = setInterval(function () {
                    timerElement.innerText = ((new Date().getTime() - startTime) / 1000).toFixed(2);
                }, 10);
            }

            // Tap/click to start or stop logic
            function handleInput() {
                let currentTime = parseFloat(timerElement.innerText);

                // Only start if timer is at 0.00 and not currently running
                if (!isRunning && currentTime === 0.00) {
                    startTimer();
                    isRunning = true;
                    tapToStartElement.style.visibility = 'hidden'; // Hide the directions when the timer starts
                } else if (isRunning) {
                    // Stop the timer if it's currently running
                    clearInterval(timerInterval);
                    isRunning = false;
                }
            }

            // Use pointerdown, which works for both touch and mouse (including trackpads)
            timerSection.addEventListener('pointerdown', function (event) {
                event.preventDefault(); // Prevents any default behavior like double-tap zoom
                handleInput();
            });

            // Listen for spacebar keypress (key code 32)
            document.addEventListener('keydown', function (event) {
                if (event.code === 'Space') {
                    event.preventDefault(); // Prevents the default behavior of scrolling down the page
                    handleInput();
                }
            });
        });
    </script>
{% endblock body %}
